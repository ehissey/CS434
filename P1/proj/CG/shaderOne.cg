
struct VertexDataInput {
	float4 vertex: POSITION;
	float3 normal: NORMAL;
	float3 color: COLOR;
};

struct VertexDataOutput {
	float4 projv  : POSITION;
	float4 color : COLOR;
	float3 vertex: TEXCOORD0;
	float3 normal: TEXCOORD1;
};

struct PixelDataOutput {
	float4 color : COLOR0;
};

VertexDataOutput VertexMain(VertexDataInput vdi, 
  uniform float4x4 modelViewProj) {

  VertexDataOutput ret;
  ret.projv = mul(modelViewProj, vdi.vertex);
  ret.color = float4(vdi.color, 1.0f);
  ret.vertex = vdi.vertex.xyz;
  ret.normal = vdi.normal;

  return ret;

}

TRIANGLE void GeometryMain(AttribArray<VertexDataOutput> tverts,
	uniform float4x4 modelViewProj) {

	emitVertex(tverts[0]);
	emitVertex(tverts[1]);
	emitVertex(tverts[2]);
	return;

}

PixelDataOutput FragmentMain(VertexDataOutput pdi, 
	uniform float3 eyeCam, uniform samplerCube cMap,
    uniform float bg) 
    {

    
    PixelDataOutput returnColor;

    float3 curPix = pdi.vertex;
    float3 eyeToPix = normalize(curPix - eyeCam);

    if(bg == 0.0f)
    {
        float3 pixNorm = normalize(pdi.normal);
        
        float3 reflecVec = normalize(eyeToPix - 2 * dot(eyeToPix, pixNorm) * pixNorm);
    

        returnColor.color = texCUBE(cMap, reflecVec);

    }
    else
    {
        returnColor.color = texCUBE(cMap, eyeToPix);
    }

    return returnColor;
}


